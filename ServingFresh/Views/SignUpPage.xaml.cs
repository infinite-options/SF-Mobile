using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Xml.Linq;
using Newtonsoft.Json;
using ServingFresh.Config;
using ServingFresh.LogIn.Classes;
using ServingFresh.Models;
using ServingFresh.Notifications;
using Xamarin.Essentials;
using Xamarin.Forms;
using Xamarin.Forms.Maps;
using System.Diagnostics;
using System.Threading.Tasks;

namespace ServingFresh.Views
{
    public partial class SignUpPage : ContentPage
    {
        //public readonly static Models.User user = new Models.User();
        public SignUpPost directSignUp = new SignUpPost();
        public bool isAddessValidated = false;
        INotifications appleNotification = DependencyService.Get<INotifications>();
        private string deviceId = null;

        public class EmailVerificationObject
        {
            public string email { get; set; }
        }


        public SignUpPage()
        {
            InitializeComponent();
            BackgroundColor = Color.FromHex("AB000000");
          
            //InitializeSignUpPost();
            //InitializeMap();

            //if (Device.RuntimePlatform == Device.iOS)
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if(deviceId != null) { Debug.WriteLine("This is the iOS GUID from Direct Sign Up: " + deviceId); }
            //}
            //else
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if (deviceId != null) { Debug.WriteLine("This is the Android GUID from Direct Sign Up " + deviceId); }
            //}

            //if(deviceId != null)
            //{
            //    localNotificationButton.IsToggled = true;
            //}
            //else
            //{
            //    localNotificationButton.IsToggled = false;
            //}

        }


        public string userType = null;


        public static string GetDeviceInformation()
        {
            var device = "";
            if (Device.RuntimePlatform == Device.Android)
            {
                device = "MOBILE ANDROID";
            }
            else
            {
                device = "MOBILE IOS";
            }
            return device;
        }

        public static string GetAutoGeneratedPasswordFrom(string firstName, string address)
        {
            var part1 = firstName;
            var part2 = "";

            foreach(char element in address.ToCharArray())
            {
                if(element != ' ')
                {
                    part2 += element;
                }
                else
                {
                    break;
                }
            }

            return part1 + part2;
        }

        public static SignUpPost GetUserFrom(Purchase purchase)
        {
            return new SignUpPost()
            {
                email = purchase.getPurchaseEmail(),
                first_name = purchase.getPurchaseFirstName(),
                last_name = purchase.getPurchaseLastName(),
                phone_number = purchase.getPurchasePhoneNumber(),
                address = purchase.getPurchaseAddress(),
                unit = purchase.getPurchaseUnit(),
                city = purchase.getPurchaseCity(),
                state = purchase.getPurchaseState(),
                zip_code = purchase.getPurchaseZipcode(),
                latitude = purchase.getPurchaseLatitude(),
                longitude = purchase.getPurchaseLongitude(),
                referral_source = GetDeviceInformation(),
                role = "GUEST",
                mobile_access_token = "FALSE",
                mobile_refresh_token = "FALSE",
                user_access_token = "FALSE",
                user_refresh_token = "FALSE",
                social = "FALSE",
                password = GetAutoGeneratedPasswordFrom(purchase.getPurchaseFirstName(), purchase.getPurchaseAddress()),
                social_id = "NULL",
            };
        }

        public static async Task<string> SignUpNewUser(SignUpPost newUser)
        {
            //var handler = new HttpClientHandler();
            //handler.AllowAutoRedirect = true;
            var userID = "";
            var client = new HttpClient();
            var serializedObject = JsonConvert.SerializeObject(newUser);
            var content = new StringContent(serializedObject, Encoding.UTF8, "application/json");
            var endpointCall = await client.PostAsync(Constant.SignUpUrl, content);

            Debug.WriteLine("USER ROLE: " + newUser.role);
            Debug.WriteLine("JSON TO SEND VIA SIGN UP ENDPOINT: " + serializedObject);

            if (endpointCall.IsSuccessStatusCode)
            {
                var endpointContentString = await endpointCall.Content.ReadAsStringAsync();
                var parsedData = JsonConvert.DeserializeObject<SignUpResponse>(endpointContentString);
                if(parsedData.code != Constant.EmailAlreadyExist)
                {
                    userID = parsedData.result.customer_uid;
                }
                else
                {
                    userID = "USER ALREADY EXIST";
                }
            }
            
            return userID;
        }

       

        void CloseSignUpPage(System.Object sender, System.EventArgs e)
        {
            Application.Current.MainPage.Navigation.PopModalAsync();
        }
    }
}
