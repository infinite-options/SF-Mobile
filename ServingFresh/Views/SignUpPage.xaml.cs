using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Xml.Linq;
using Newtonsoft.Json;
using ServingFresh.Config;
using ServingFresh.LogIn.Classes;
using ServingFresh.Models;
using ServingFresh.Notifications;
using Xamarin.Essentials;
using Xamarin.Forms;
using Xamarin.Forms.Maps;
using System.Diagnostics;
using System.Threading.Tasks;
using static ServingFresh.Views.PrincipalPage;
using Xamarin.Auth;

namespace ServingFresh.Views
{
    public partial class SignUpPage : ContentPage
    {
        //public readonly static Models.User user = new Models.User();
        public SignUpPost directSignUp = new SignUpPost();
        public bool isAddessValidated = false;
        INotifications appleNotification = DependencyService.Get<INotifications>();
        private string deviceId = null;

        public class EmailVerificationObject
        {
            public string email { get; set; }
        }


        public SignUpPage()
        {
            InitializeComponent();
            BackgroundColor = Color.FromHex("AB000000");
          
            //InitializeSignUpPost();
            //InitializeMap();

            //if (Device.RuntimePlatform == Device.iOS)
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if(deviceId != null) { Debug.WriteLine("This is the iOS GUID from Direct Sign Up: " + deviceId); }
            //}
            //else
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if (deviceId != null) { Debug.WriteLine("This is the Android GUID from Direct Sign Up " + deviceId); }
            //}

            //if(deviceId != null)
            //{
            //    localNotificationButton.IsToggled = true;
            //}
            //else
            //{
            //    localNotificationButton.IsToggled = false;
            //}

        }


        public SignUpPage(double height)
        {
            InitializeComponent();
            BackgroundColor = Color.FromHex("AB000000");
            signUpFrame.Margin = new Thickness(0, height, 0, 0);
            
            //InitializeSignUpPost();
            //InitializeMap();

            //if (Device.RuntimePlatform == Device.iOS)
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if(deviceId != null) { Debug.WriteLine("This is the iOS GUID from Direct Sign Up: " + deviceId); }
            //}
            //else
            //{
            //    deviceId = Preferences.Get("guid", null);
            //    if (deviceId != null) { Debug.WriteLine("This is the Android GUID from Direct Sign Up " + deviceId); }
            //}

            //if(deviceId != null)
            //{
            //    localNotificationButton.IsToggled = true;
            //}
            //else
            //{
            //    localNotificationButton.IsToggled = false;
            //}

        }


        public string userType = null;


        public static string GetDeviceInformation()
        {
            var device = "";
            if (Device.RuntimePlatform == Device.Android)
            {
                device = "MOBILE ANDROID";
            }
            else
            {
                device = "MOBILE IOS";
            }
            return device;
        }

        public static string GetAutoGeneratedPasswordFrom(string firstName, string address)
        {
            var part1 = firstName;
            var part2 = "";

            foreach(char element in address.ToCharArray())
            {
                if(element != ' ')
                {
                    part2 += element;
                }
                else
                {
                    break;
                }
            }

            return part1 + part2;
        }

        public static SignUpPost GetUserFrom(Purchase purchase)
        {
            return new SignUpPost()
            {
                email = purchase.getPurchaseEmail(),
                first_name = purchase.getPurchaseFirstName(),
                last_name = purchase.getPurchaseLastName(),
                phone_number = purchase.getPurchasePhoneNumber(),
                address = purchase.getPurchaseAddress(),
                unit = purchase.getPurchaseUnit(),
                city = purchase.getPurchaseCity(),
                state = purchase.getPurchaseState(),
                zip_code = purchase.getPurchaseZipcode(),
                latitude = purchase.getPurchaseLatitude(),
                longitude = purchase.getPurchaseLongitude(),
                referral_source = GetDeviceInformation(),
                role = "GUEST",
                mobile_access_token = "FALSE",
                mobile_refresh_token = "FALSE",
                user_access_token = "FALSE",
                user_refresh_token = "FALSE",
                social = "FALSE",
                password = GetAutoGeneratedPasswordFrom(purchase.getPurchaseFirstName(), purchase.getPurchaseAddress()),
                social_id = "NULL",
            };
        }

        public static async Task<string> SignUpNewUser(SignUpPost newUser)
        {
            //var handler = new HttpClientHandler();
            //handler.AllowAutoRedirect = true;
            var userID = "";
            var client = new HttpClient();
            var serializedObject = JsonConvert.SerializeObject(newUser);
            var content = new StringContent(serializedObject, Encoding.UTF8, "application/json");
            var endpointCall = await client.PostAsync(Constant.SignUpUrl, content);

            Debug.WriteLine("USER ROLE: " + newUser.role);
            Debug.WriteLine("JSON TO SEND VIA SIGN UP ENDPOINT: " + serializedObject);

            if (endpointCall.IsSuccessStatusCode)
            {
                var endpointContentString = await endpointCall.Content.ReadAsStringAsync();
                var parsedData = JsonConvert.DeserializeObject<SignUpResponse>(endpointContentString);
                if(parsedData.code != Constant.EmailAlreadyExist)
                {
                    userID = parsedData.result.customer_uid;
                }
                else
                {
                    userID = "USER ALREADY EXIST";
                }
            }
            
            return userID;
        }


        async void SignUpDirectUserFromPrincipal(System.Object sender, System.EventArgs e)
        {
            var client1 = new SignUp();
            if (client1.ValidateSignUpInfo(newUserFirstName, newUserLastName, newUserEmail1, newUserEmail2, newUserPassword1, newUserPassword2))
            {
                if (client1.ValidateEmail(newUserEmail1, newUserEmail2))
                {
                    if (client1.ValidatePassword(newUserPassword1, newUserPassword2))
                    {
                        // user is ready to be sign in.
                        var client = new SignUp();
                        var content = client.SetDirectUser(user, newUserPassword1.Text);
                        var signUpStatus = await SignUp.SignUpNewUser(content);

                        if (signUpStatus != "" && signUpStatus != "USER ALREADY EXIST")
                        {
                            user.setUserID(signUpStatus);
                            user.setUserPlatform("DIRECT");
                            user.setUserType("CUSTOMER");
                            client.SendUserToSelectionPage();
                            await DisplayAlert("Sign Up", "Confirmation email sent. Please check and click the link included.", "Okay, continue");
                            Application.Current.MainPage = new SelectionPage();
                        }
                        else if (signUpStatus != "" && signUpStatus == "USER ALREADY EXIST")
                        {
                            await DisplayAlert("Oops", "This email already exist in our system. Please use another email", "OK");
                        }
                    }
                    else
                    {
                        await DisplayAlert("Oops", "Please check that your password is the same in both entries", "OK");
                        return;
                    }
                }
                else
                {
                    await DisplayAlert("Oops", "Please check that your email is the same in both entries", "OK");
                    return;
                }
            }
            else
            {
                await DisplayAlert("Oops", "Please enter all the required information. Thanks!", "OK");
                return;
            }
        }

        void ContinueWithFacebook(System.Object sender, System.EventArgs e)
        {
            var client = new SignIn();
            var authenticator = client.GetFacebookAuthetication();
            var presenter = new Xamarin.Auth.Presenters.OAuthLoginPresenter();
            authenticator.Completed += FacebookAuthetication;
            authenticator.Error += Authenticator_Error;
            presenter.Login(authenticator);
        }

        void ContinueWithGoogle(System.Object sender, System.EventArgs e)
        {
            var client = new SignIn();
            var authenticator = client.GetGoogleAuthetication();
            var presenter = new Xamarin.Auth.Presenters.OAuthLoginPresenter();
            AuthenticationState.Authenticator = authenticator;
            authenticator.Completed += GoogleAuthetication;
            authenticator.Error += Authenticator_Error;
            presenter.Login(authenticator);
        }

        private async void FacebookAuthetication(object sender, Xamarin.Auth.AuthenticatorCompletedEventArgs e)
        {
            var authenticator = sender as OAuth2Authenticator;

            if (authenticator != null)
            {
                authenticator.Completed -= FacebookAuthetication;
                authenticator.Error -= Authenticator_Error;
            }

            if (e.IsAuthenticated)
            {
                try
                {
                    var clientLogIn = new SignIn();
                    var clientSignUp = new SignUp();

                    var facebookUser = clientLogIn.GetFacebookUser(e.Account.Properties["access_token"]);
                    var content = clientSignUp.SetDirectUser(user, e.Account.Properties["access_token"], "", facebookUser.id, facebookUser.email, "FACEBOOK");
                    var signUpStatus = await SignUp.SignUpNewUser(content);

                    if (signUpStatus != "" && signUpStatus != "USER ALREADY EXIST")
                    {
                        user.setUserID(signUpStatus);
                        user.setUserPlatform("FACEBOOK");
                        user.setUserType("CUSTOMER");
                        clientSignUp.SendUserToSelectionPage();
                    }
                    else if (signUpStatus != "" && signUpStatus == "USER ALREADY EXIST")
                    {
                        await DisplayAlert("Oops", "This email already exist in our system. Please use another email", "OK");
                    }
                }
                catch (Exception g)
                {
                    Debug.WriteLine(g.Message);
                }
            }
        }

        private async void GoogleAuthetication(object sender, AuthenticatorCompletedEventArgs e)
        {
            var authenticator = sender as OAuth2Authenticator;

            if (authenticator != null)
            {
                authenticator.Completed -= GoogleAuthetication;
                authenticator.Error -= Authenticator_Error;
            }

            if (e.IsAuthenticated)
            {
                try
                {
                    var clientLogIn = new SignIn();
                    var clientSignUp = new SignUp();

                    var googleUser = await clientLogIn.GetGoogleUser(e);
                    var content = clientSignUp.SetDirectUser(user, e.Account.Properties["access_token"], e.Account.Properties["refresh_token"], googleUser.id, googleUser.email, "GOOGLE");
                    var signUpStatus = await SignUp.SignUpNewUser(content);

                    if (signUpStatus != "" && signUpStatus != "USER ALREADY EXIST")
                    {
                        user.setUserID(signUpStatus);
                        user.setUserPlatform("GOOGLE");
                        user.setUserType("CUSTOMER");
                        clientSignUp.SendUserToSelectionPage();
                    }
                    else if (signUpStatus != "" && signUpStatus == "USER ALREADY EXIST")
                    {
                        await DisplayAlert("Oops", "This email already exist in our system. Please use another email", "OK");
                    }
                }
                catch (Exception g)
                {
                    Debug.WriteLine(g.Message);
                }
            }
        }

        private async void Authenticator_Error(object sender, Xamarin.Auth.AuthenticatorErrorEventArgs e)
        {
            await DisplayAlert("An error occur when authenticating", "Please try again", "OK");
        }

        void CloseSignUpPage(System.Object sender, System.EventArgs e)
        {
            Application.Current.MainPage.Navigation.PopModalAsync();
        }
    }
}
