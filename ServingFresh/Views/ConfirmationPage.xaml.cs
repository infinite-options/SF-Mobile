using System;
using System.Collections.Generic;

using Xamarin.Forms;
using Xamarin.Forms.Maps;
using static ServingFresh.Views.SelectionPage;
using static ServingFresh.Views.CheckoutPage;
using static ServingFresh.Views.PrincipalPage;
using ServingFresh.Models;
using ServingFresh.LogIn.Classes;
using Xamarin.Auth;
using System.Diagnostics;
using Acr.UserDialogs;
using ServingFresh.Config;

namespace ServingFresh.Views
{
    public partial class ConfirmationPage : ContentPage
    {
        public ConfirmationPage()
        {
            InitializeComponent();
            SelectionPage.SetMenu(guestMenuSection, customerMenuSection, historyLabel, profileLabel);
            cartItemsNumber.Text = order.Count.ToString();
            contactMessage.Text = "If we have question. We will contact you at " + purchase.getPurchaseEmail() + " or " + purchase.getPurchasePhoneNumber();
            expectedDeliveryMessage.Text = "Your order will be delivered on: " + selectedDeliveryDate.deliveryTimeStamp.ToString("dddd, MMM dd, yyyy");
            PlaceLocationOnMap(double.Parse(purchase.getPurchaseLatitude()), double.Parse(purchase.getPurchaseLongitude()));
            ShowAutoGenereatedCredentials(purchase.getPurchaseEmail(), SignUp.GetAutoGeneratedPasswordFrom(purchase.getPurchaseFirstName().Trim(), purchase.getPurchaseAddress().Trim()));
        }

        void PlaceLocationOnMap(double latitude, double longitude)
        {
            Position position = new Position(latitude, longitude);
            map.MapType = MapType.Street;
            var mapSpan = new MapSpan(position, 0.001, 0.001);
            Pin address = new Pin();
            address.Label = "Delivery Address";
            address.Type = PinType.SearchResult;
            address.Position = position;
            map.MoveToRegion(mapSpan);
            map.Pins.Add(address);
        }

        async void ShowAutoGenereatedCredentials(string userName, string tempPassword)
        {
            await DisplayAlert("Thank you for your purchase!", "Remeber you can access new features like rewards, history, and more by using the following credentials: ("+ userName+ ", " + tempPassword + ") ", "OK");
        }

        void ReturnToStore(System.Object sender, System.EventArgs e)
        {
            Application.Current.MainPage = new SelectionPage();
        }

        void SignIn(System.Object sender, System.EventArgs e)
        {
            Application.Current.MainPage = new LogInPage();
        }

        void ShowMenuFromConfirmation(System.Object sender, System.EventArgs e)
        {
            //var height = new GridLength(0);
            //if (menuFrame.Height.Equals(height))
            //{
            //    menuFrame.Height = this.Height - 180;
            //}
            //else
            //{
            //    menuFrame.Height = 0;
            //}
            Application.Current.MainPage.Navigation.PushModalAsync(new MenuPage(),true);
        }

        void NavigateToCartFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToCart(sender, e);
        }

        void NavigateToStoreFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToStore(sender, e);
        }

        void NavigateToHistoryFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToHistory(sender, e);
        }

        void NavigateToRefudsFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToRefunds(sender, e);
        }

        void NavigateToInfoFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToInfo(sender, e);
        }

        void NavigateToProfileFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToProfile(sender, e);
        }

        void NavigateToSignInFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToSignIn(sender, e);
        }

        void NavigateToSignUpFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToSignUp(sender, e);
        }

        void NavigateToMainFromConfirmation(System.Object sender, System.EventArgs e)
        {
            NavigateToMain(sender, e);
        }

        async void SignUpUser(System.Object sender, System.EventArgs e)
        {
            try
            {
                var client = new PrincipalPage();
                if (client.ValidatePassword(passsword1, passsword2))
                {
                    DateTime today = DateTime.Now;
                    DateTime expDate = today.AddDays(Constant.days);
                    // user is ready to be sign in.
                    UserDialogs.Instance.ShowLoading("We are creating your Serving Fresh account!");

                    var updateClient = new SignUp();
                    user.setUserID(purchase.getPurchaseCustomerUID());
                    user.setUserSessionTime(expDate);
                    user.setUserPlatform("DIRECT");
                    user.setUserType("CUSTOMER");
                    user.setUserEmail(purchase.getPurchaseEmail());
                    user.setUserFirstName(purchase.getPurchaseFirstName());
                    user.setUserLastName(purchase.getPurchaseLastName());
                    user.setUserPhoneNumber(purchase.getPurchasePhoneNumber());
                    user.setUserAddress(purchase.getPurchaseAddress());
                    user.setUserUnit(purchase.getPurchaseUnit() == null ? "" : purchase.getPurchaseUnit());
                    user.setUserCity(purchase.getPurchaseCity());
                    user.setUserState(purchase.getPurchaseState());
                    user.setUserZipcode(purchase.getPurchaseZipcode());
                    user.setUserLatitude(purchase.getPurchaseLatitude());
                    user.setUserLongitude(purchase.getPurchaseLongitude());
                    var content = updateClient.UpdateDirectUser(user, passsword1.Text);
                    var signUpStatus = await SignUp.SignUpNewUser(content);

                    if (signUpStatus)
                    {
                        UserDialogs.Instance.HideLoading();
                        await DisplayAlert("Great!", "We have created your account! Congratulations", "OK");
                        Application.Current.MainPage = new SelectionPage();
                    }
                    else
                    {
                        UserDialogs.Instance.HideLoading();
                        await DisplayAlert("Oops", "We were not able to sign you up. Try again.", "OK");
                    }
                }
                else
                {
                    await DisplayAlert("Oops", "Please check that your password is the same in both entries", "OK");
                    return;
                }
            }catch(Exception errorSignUpUser)
            {
                var client = new Diagnostic();
                client.parseException(errorSignUpUser.ToString(), user);
            }
        }

        void ContinuteWithFacebook(System.Object sender, System.EventArgs e)
        {
            var client = new SignIn();
            var authenticator = client.GetFacebookAuthetication();
            var presenter = new Xamarin.Auth.Presenters.OAuthLoginPresenter();
            authenticator.Completed += FacebookAuthetication;
            authenticator.Error += Authenticator_Error;
            presenter.Login(authenticator);
        }

        void ContinueWithGoogle(System.Object sender, System.EventArgs e)
        {
            var client = new SignIn();
            var authenticator = client.GetGoogleAuthetication();
            var presenter = new Xamarin.Auth.Presenters.OAuthLoginPresenter();
            AuthenticationState.Authenticator = authenticator;
            authenticator.Completed += GoogleAuthetication;
            authenticator.Error += Authenticator_Error;
            presenter.Login(authenticator);
        }

        private async void FacebookAuthetication(object sender, Xamarin.Auth.AuthenticatorCompletedEventArgs e)
        {
            var authenticator = sender as OAuth2Authenticator;

            if (authenticator != null)
            {
                authenticator.Completed -= FacebookAuthetication;
                authenticator.Error -= Authenticator_Error;
            }

            if (e.IsAuthenticated)
            {
                try
                {
                    var clientLogIn = new SignIn();
                    var facebookUser = clientLogIn.GetFacebookUser(e.Account.Properties["access_token"]);
                    var updateClient = new SignUp();

                    user.setUserEmail(facebookUser.email);
                    var content = updateClient.UpdateSocialUser(user, e.Account.Properties["access_token"], "", facebookUser.id, "FACEBOOK");
                    var signUpStatus = await SignUp.SignUpNewUser(content);

                    if (signUpStatus)
                    {
                        await DisplayAlert("Great!", "We have created your account! Congratulations", "OK");
                        user.setUserType("CUSTOMER");
                        Application.Current.MainPage = new SelectionPage();
                    }
                    else
                    {
                        await DisplayAlert("Oops", "We were not able to sign you up. Try again.", "OK");
                    }
                }
                catch (Exception errorFacebookAuthetication)
                {
                    var client = new Diagnostic();
                    client.parseException(errorFacebookAuthetication.ToString(), user);
                }
            }
        }

        private async void GoogleAuthetication(object sender, AuthenticatorCompletedEventArgs e)
        {
            var authenticator = sender as OAuth2Authenticator;

            if (authenticator != null)
            {
                authenticator.Completed -= GoogleAuthetication;
                authenticator.Error -= Authenticator_Error;
            }

            if (e.IsAuthenticated)
            {
                try
                {
                    var clientLogIn = new SignIn();
                    var updateClient = new SignUp();

                    var googleUser = await clientLogIn.GetGoogleUser(e);

                    user.setUserEmail(googleUser.email);
                    var content = updateClient.UpdateSocialUser(user, e.Account.Properties["access_token"], e.Account.Properties["refresh_token"], googleUser.id, "GOOGLE");
                    var signUpStatus = await SignUp.SignUpNewUser(content);

                    if (signUpStatus)
                    {
                        await DisplayAlert("Great!", "We have created your account! Congratulations", "OK");
                        user.setUserType("CUSTOMER");
                        Application.Current.MainPage = new SelectionPage();
                    }
                    else
                    {
                        await DisplayAlert("Oops", "We were not able to sign you up. Try again.", "OK");
                    }
                }
                catch (Exception errorGoogleAuthetication)
                {
                    var client = new Diagnostic();
                    client.parseException(errorGoogleAuthetication.ToString(), user);
                }
            }
        }

        private async void Authenticator_Error(object sender, Xamarin.Auth.AuthenticatorErrorEventArgs e)
        {
            await DisplayAlert("An error occur when authenticating", "Please try again", "OK");
        }

        void NavigateToHistory(System.Object sender, System.EventArgs e)
        {
            Application.Current.MainPage = new HistoryPage();
        }
    }  
}
